package Excecoes.TryCathAninhados;

/*Desafio: Opera√ß√µes com Try-Catch Aninhado

Crie um programa que:

Pe√ßa dois n√∫meros inteiros ao usu√°rio.

Use try-catch externo para tratar entrada inv√°lida (InputMismatchException).

Dentro do try externo, crie um try-catch interno para realizar uma divis√£o:

Se o denominador for 0, trate com o catch interno (ArithmeticException).

Se der certo, exiba o resultado normalmente.

No final, exiba sempre uma mensagem de finaliza√ß√£o (use finally).

        üîπ Fluxo esperado

Usu√°rio digita letra ‚Üí cai no catch externo.

Usu√°rio digita n√∫meros, mas denominador 0 ‚Üí cai no catch interno.

Usu√°rio digita tudo certo ‚Üí mostra o resultado.*/

import java.util.InputMismatchException;
import java.util.Scanner;

public class Exercicio05 {
    public static void main(String[] args) {
        Scanner teclado = new Scanner(System.in);

        try{
            System.out.println("Digite o primeiro n√∫mero: ");
            int num1 = teclado.nextInt();

            System.out.println("Digite o segundo n√∫mero: ");
            int num2 = teclado.nextInt();

            try{
                new Exercicio05().dividir(num1, num2);

            }catch(ArithmeticException e){
                System.out.println("Divis√£o por zero n√£o permitida!");
            }

        }catch(InputMismatchException e) {
            System.out.println("Digite somente numeros inteiros!");
        }finally {
            System.out.println("Opera√ß√£o finalizada!");
            teclado.close();
        }

    }
    public void dividir(int num1, int num2){
        int resultado = num1 / num2;
        System.out.println("Resultado da divis√£o: " + resultado);
    }
}
