package Strings;

/*üß© Desafio 4 ‚Äî Manipula√ß√£o pesada (Performance)
üìå Compare String, StringBuilder e StringBuffer.

Requisitos:

Fa√ßa um loop de 0 a 10.000 adicionando n√∫meros √† string:

java
        Copiar
Editar
String resultado = "";
resultado += i;
Fa√ßa o mesmo com StringBuilder e StringBuffer.

Me√ßa o tempo de execu√ß√£o dos tr√™s casos.

Imprima os tempos e compare.*/

public class Exercicio4 {


        public static void main(String[] args) {

            // =========================
            // üî¥ TESTE COM STRING
            // =========================

            // Marca o tempo inicial em nanosegundos
            long inicioString = System.nanoTime();

            // String √© imut√°vel, ent√£o cada concatena√ß√£o cria um novo objeto
            String texto = "";
            for (int i = 0; i < 10000; i++) {
                texto += i; // Ineficiente!
            }

            // Marca o tempo final
            long fimString = System.nanoTime();

            // Calcula e imprime o tempo gasto em milissegundos
            double tempoString = (fimString - inicioString) / 1_000_000.0;
            System.out.println("Tempo com String: " + tempoString + " ms");



            // =========================
            // üü¢ TESTE COM STRINGBUILDER
            // =========================

            long inicioBuilder = System.nanoTime();

            // StringBuilder √© mut√°vel, ideal para manipular strings em um √∫nico thread
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < 10000; i++) {
                builder.append(i); // Muito mais eficiente!
            }

            long fimBuilder = System.nanoTime();

            double tempoBuilder = (fimBuilder - inicioBuilder) / 1_000_000.0;
            System.out.println("Tempo com StringBuilder: " + tempoBuilder + " ms");



            // =========================
            // üîµ TESTE COM STRINGBUFFER
            // =========================

            long inicioBuffer = System.nanoTime();

            // StringBuffer tamb√©m √© mut√°vel, mas √© sincronizado (mais seguro em multi-threads)
            StringBuffer buffer = new StringBuffer();
            for (int i = 0; i < 10000; i++) {
                buffer.append(i);
            }

            long fimBuffer = System.nanoTime();

            double tempoBuffer = (fimBuffer - inicioBuffer) / 1_000_000.0;
            System.out.println("Tempo com StringBuffer: " + tempoBuffer + " ms");



            // =========================
            // ‚úÖ CONCLUS√ÉO
            // =========================
            System.out.println("\nConclus√£o:");
            System.out.println("- String √© a mais lenta (por ser imut√°vel).");
            System.out.println("- StringBuilder √© a mais r√°pida (sem sincroniza√ß√£o).");
            System.out.println("- StringBuffer √© intermedi√°ria (s√≠ncrona, mas mais lenta que Builder).");
        }
}
